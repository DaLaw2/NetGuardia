#![no_std]
#![no_main]

mod filter;
mod forward;
mod monitor;
mod parsing;
mod utils;

use aya_ebpf::bindings::xdp_action;
use aya_ebpf::macros::xdp;
use aya_ebpf::programs::XdpContext;
use parsing::{parse_packet, modify_packet_destination};

#[xdp]
pub fn packet_filter(ctx: XdpContext) -> u32 {
    match process_packet(ctx) {
        Ok(action) => action,
        Err(_) => xdp_action::XDP_ABORTED,
    }
}

fn process_packet(ctx: XdpContext) -> Result<u32, ()> {
    // 1. Parse packet and extract information
    let packet_info = parse_packet(&ctx)?;

    // 2. Update monitoring statistics
    monitor::update_stats(&packet_info);

    // 3. Check if packet should be blocked
    if filter::should_block(&packet_info) {
        return Ok(xdp_action::XDP_DROP);
    }

    // 4. Check if packet should be forwarded
    if let Some(forward_rule) = forward::get_forward_rule(packet_info.src_ip, packet_info.src_port) {
        modify_packet_destination(&ctx, forward_rule.new_ip, forward_rule.new_port)?;
        return Ok(xdp_action::XDP_TX);
    }

    Ok(xdp_action::XDP_PASS)
}
